package menu;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import  java.lang.Object;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class Insertar {
	
	static Scanner teclado=new Scanner(System.in);

	
	static ArrayList<Alumno> meter(ArrayList<Alumno> alumnos){
		
		boolean salir=true;
		
		int opcion;
		String Id,Nombre,Apellidos,Altura,Curso,Mayor;
		int Edad=0;
		
		
		do {
			
			System.out.println("Introduce el DNI del alumno");
			Id=teclado.next();
			System.out.println("Introduce el Nombre del alumno");
			Nombre=teclado.next();
			Nombre = capitalizar(Nombre);
			System.out.println("Introduce el Apellido del alumno");
			teclado.nextLine();
			Apellidos=teclado.nextLine();
			Apellidos=capitalizar(Apellidos);
			System.out.println("Introduce el Altura del alumno");
			Altura=teclado.next();
			System.out.println("Introduce el Curso del alumno");
			Curso=teclado.next();
			System.out.println("Introduce el Edad del alumno");
			Edad=teclado.nextInt();
			
			
			if(Edad>18) {
				Mayor="Es mayor de edad";
			}
			else {
				Mayor="Es menor de edad";
			}
			
			
			
			alumnos.add(new Alumno(Id,Nombre,Apellidos,Edad,Altura,Curso,Mayor));
			
			
			System.out.println("Desea introducir mas alumnos pulse 1 para cuntinuar 2 para salir");
			opcion=teclado.nextInt();
			
			switch(opcion) {
			case 1:
				salir=true;
				break;
			case 2:
				salir=false;
				break;
			}	
		}while(salir!=false);
		return alumnos;	
	}
	public static boolean isWhitespace(char ch) {
		return false;
		
	}
	
	public static String capitalizar (String palabra){
		 
		if (palabra.length() == 0 ) {
			return palabra;
		}
		return palabra.substring(0, 1).toUpperCase() + palabra.substring(1).toLowerCase();
	                
	}
	
	
	
	static void leeralumnos(ArrayList<Alumno> alumnos) {
		System.out.println("... Alumnos ingresados ...");
		Iterator<Alumno> itr = alumnos.iterator();
		while(itr.hasNext()){
			Alumno alum = itr.next();
			System.out.println(alum.getId()+ ".-> "+ alum.getNombre()
			+".-> "+ alum.getApellido()+".-> "+ alum.getEdad()+".-> "+ alum.getAltura()+
			".-> "+ alum.getCurso()+ ".->" + alum.getMayor());
			
		}
	}
	
	static void archivotxt(ArrayList<Alumno> alumnos) {
		String separador="... Alumnos ingresados ..."+System.getProperty("line.separator");
		Iterator<Alumno> itr = alumnos.iterator();
		while(itr.hasNext()){
			Alumno alum = itr.next();
			separador +=alum.getId() + ".-> "+ alum.getNombre()
			+".-> "+ alum.getApellido()+".-> "+ alum.getEdad()+".-> "+ alum.getAltura()+
			".-> "+ alum.getCurso()+System.getProperty("line.separator");
		}
		separador +="\n---------------------------------------------";
		try {
			FileWriter fWriter = new FileWriter(new File("Alumno.txt"), true);
			fWriter.write(separador);
			fWriter.flush();
			fWriter.close();
			System.out.println("\nLos datos se han guardado correctamente en el fichero: Alumno.txt");
		} catch (IOException e) {
			e.printStackTrace();
		}	
	}
	
	static void borrar(ArrayList<Alumno> alumnos) {
		
		@SuppressWarnings("resource")
		Scanner s = new Scanner(System.in);
		System.out.println("... Borrando alumno segun id ...");
		Iterator<Alumno> itr = alumnos.iterator();
		System.out.println("Introduzca el id del alumno que desea borrar:");
		String i = s.nextLine();
		while(itr.hasNext()){
			Alumno alumno = itr.next();
			if (i.equalsIgnoreCase(alumno.getId())) {
				System.out.println("Partido encontrado. Procediendo a borrado...");
				itr.remove();
			}
		} 
		leeralumnos(alumnos);
	}
	

	public static void leer() throws IOException {
		RandomAccessFile procesoleer = new RandomAccessFile("Alumno.txt","rw");
		for(int i=0;i<procesoleer.length();i++){
					System.out.print((char)procesoleer.read());
		}
		procesoleer.close();
	}

	public static void volcarxml(ArrayList<Alumno> alumno) throws ParseException{
		try {
	        DocumentBuilderFactory dFact = DocumentBuilderFactory.newInstance();
	        DocumentBuilder build = dFact.newDocumentBuilder();
	        org.w3c.dom.Document doc = build.newDocument();
	        Node raiz = (Node) ((org.w3c.dom.Document) doc).createElement("Colegio");
	        ((Node) doc).appendChild(raiz);
	        
	        for (Alumno dtl : alumno) {
	        	Element Detalles =  doc.createElement("Alumno");
		        raiz.appendChild(Detalles);
	            Element Id =  doc.createElement("Id");
	            Id.appendChild(doc.createTextNode(String.valueOf(dtl.getId())));
	            Detalles.appendChild(Id);            
	            Element nom = doc.createElement("Nombre");
	            nom.appendChild(doc.createTextNode(String.valueOf(dtl.getNombre())));
	            Detalles.appendChild(nom);	            
	            Element ape = doc.createElement("Apellidos");
	            ape.appendChild(doc.createTextNode(String.valueOf(dtl.getApellido())));
	            Detalles.appendChild(ape);	            
	            Element cur = doc.createElement("Curso");
	            cur.appendChild(doc.createTextNode(String.valueOf(dtl.getCurso())));
	            Detalles.appendChild(cur);
	            Element eda = doc.createElement("Edad");
	            eda.appendChild(doc.createTextNode(String.valueOf(dtl.getEdad())));
	            Detalles.appendChild(eda);	            
	            Element alt = doc.createElement("Altura");
	            alt.appendChild(doc.createTextNode(String.valueOf(dtl.getAltura())));
	            Detalles.appendChild(alt);
	            Element ma = doc.createElement("Mayor");
	            ma.appendChild(doc.createTextNode(String.valueOf(dtl.getMayor())));
	            Detalles.appendChild(ma);
	        }
	        
	        TransformerFactory tranFactory = TransformerFactory.newInstance();
	        Transformer aTransformer = tranFactory.newTransformer();
	        DOMSource source = new DOMSource((Node) doc);
	        
	        try {
	            FileWriter fos = new FileWriter(new File("Alumno.xml"));
	            StreamResult result = new StreamResult(fos);
	            aTransformer.transform(source, result);
	            System.out.println("Los datos han sido guardados correctamente en el archivo Alumnos.xml");

	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
		    } catch (Exception ex2) {
		        ex2.printStackTrace();
		    } 
		
	}
	
	static void leerXml(ArrayList<Alumno> alumnos) {
		DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();	
		File f = new File("Alumno.xml");
		try {
			DocumentBuilder build = fac.newDocumentBuilder();
			Document doc = build.parse(f);
			doc.getDocumentElement().normalize();	
			System.out.println("Elemento raíz: "+doc.getDocumentElement().getNodeName());				
			NodeList lista_Alumnos = doc.getElementsByTagName("Alumno");
			
			for(int i = 0; i < lista_Alumnos.getLength(); i ++){
				Node Atributos=lista_Alumnos.item(i);
				System.out.println("Elemento: "+Atributos.getNodeName());
				if(Atributos.getNodeType() == Node.ELEMENT_NODE) {
					Element element=(Element)Atributos;
					System.out.println("Id:" + element.getElementsByTagName("Id").item(0).getTextContent());
					System.out.println("Nombre: " + element.getElementsByTagName("Nombre").item(0).getTextContent());
					System.out.println("Apellidos: " + element.getElementsByTagName("Apellidos").item(0).getTextContent());
					System.out.println("Curso: " + element.getElementsByTagName("Curso").item(0).getTextContent());
					System.out.println("Edad: " + element.getElementsByTagName("Edad").item(0).getTextContent());
					System.out.println("Altura: " + element.getElementsByTagName("Altura").item(0).getTextContent());
					System.out.println("Mayor: " + element.getElementsByTagName("Mayor").item(0).getTextContent());
				}	
			}		
		} catch (Exception ex) {
			ex.printStackTrace();
		} 
	}
	
}
